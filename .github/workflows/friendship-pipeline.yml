name: FriendShip - Deploy to Amazon EC2

on:
  push:
    branches:
      - main

env:
  APP_NAME : friendship
  BUILD_NAME : testRDS

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 설정 파일 추가
      - name: PRIVATE 설정 파일(yml) 추가
        run: |
          cd ./src/main/resources
          touch ./application-prod.json
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.json
          ls -a .
          cat ./application-prod.json

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          script: |
            cd ./src/main/resources
          name: "gcp.json"
          json: ${{ secrets.APPLICATION_PROD }}
        
      - name: gradlew 실행 권한 허용
        run: chmod +x gradlew

      - name: Gradle 빌드
        run: ./gradlew build

      # - name: Docker 빌드
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #     docker build --platform linux/arm64/v8 -t app .
      #     docker tag app ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
      #     docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

      # - name: EC2 인스턴스 배포 
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
      #     username: ec2-user
      #     key: ${{ secrets.PRIVATE_KEY }} # pem 키
      #     # 도커 작업
      #     script: |
      #       sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
      #       docker stop $(docker ps -a -q)
      #       sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}
      #       sudo docker rm $(docker ps --filter 'status=exited' -a -q)
      #       sudo docker image prune -a -f
